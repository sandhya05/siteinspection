/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function ISimpleSmoothScrollOption() { }
/** @type {?|undefined} */
ISimpleSmoothScrollOption.prototype.duration;
/** @type {?|undefined} */
ISimpleSmoothScrollOption.prototype.easing;
/** @type {?|undefined} */
ISimpleSmoothScrollOption.prototype.offset;
var SimpleSmoothScrollOption = /** @class */ (function () {
    function SimpleSmoothScrollOption(option) {
        /**
         * EasingFunctions - from https://gist.github.com/gre/1650294
         */
        this.EasingFunctions = {
            // no easing, no acceleration
            linear: function (t) { return t; },
            // accelerating from zero velocity
            easeInQuad: function (t) { return t * t; },
            // decelerating to zero velocity
            easeOutQuad: function (t) { return t * (2 - t); },
            // acceleration until halfway, then deceleration
            easeInOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
            // accelerating from zero velocity
            easeInCubic: function (t) { return t * t * t; },
            // decelerating to zero velocity
            easeOutCubic: function (t) { return (--t) * t * t + 1; },
            // acceleration until halfway, then deceleration
            easeInOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
            // accelerating from zero velocity
            easeInQuart: function (t) { return t * t * t * t; },
            // decelerating to zero velocity
            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },
            // acceleration until halfway, then deceleration
            easeInOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
            // accelerating from zero velocity
            easeInQuint: function (t) { return t * t * t * t * t; },
            // decelerating to zero velocity
            easeOutQuint: function (t) { return 1 + (--t) * t * t * t * t; },
            // acceleration until halfway, then deceleration
            easeInOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }
        };
        this.duration = option.duration || 800;
        this.offset = option.offset || 0;
        this.easing = this.EasingFunctions[option.easing] || this.EasingFunctions['easeInOutQuad'];
    }
    return SimpleSmoothScrollOption;
}());
export { SimpleSmoothScrollOption };
if (false) {
    /** @type {?} */
    SimpleSmoothScrollOption.prototype.duration;
    /** @type {?} */
    SimpleSmoothScrollOption.prototype.easing;
    /** @type {?} */
    SimpleSmoothScrollOption.prototype.offset;
    /**
     * EasingFunctions - from https://gist.github.com/gre/1650294
     * @type {?}
     */
    SimpleSmoothScrollOption.prototype.EasingFunctions;
}
var SimpleSmoothScrollService = /** @class */ (function () {
    function SimpleSmoothScrollService(platformId) {
        this.platformId = platformId;
    }
    /**
     * @param {?} height
     * @param {?} opt
     * @return {?}
     */
    SimpleSmoothScrollService.prototype.smoothScroll = /**
     * @param {?} height
     * @param {?} opt
     * @return {?}
     */
    function (height, opt) {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var option_1 = new SimpleSmoothScrollOption(opt);
            /** @type {?} */
            var duration = option_1.duration;
            /** @type {?} */
            var doc = document.documentElement;
            /** @type {?} */
            var begin_1 = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
            /** @type {?} */
            var t = 10;
            /** @type {?} */
            var tick_1 = 1 / (duration / t);
            height += option_1.offset;
            /** @type {?} */
            var distance_1 = height - begin_1;
            if (distance_1 == 0)
                return;
            /** @type {?} */
            var time_1 = 0;
            /** @type {?} */
            var y_1 = void 0;
            /** @type {?} */
            var current_1 = void 0;
            /** @type {?} */
            var s_1 = setInterval(function () {
                y_1 = option_1.easing(time_1);
                current_1 = y_1 * distance_1 + begin_1;
                if (current_1 >= height && distance_1 > 0) {
                    current_1 = height;
                    clearInterval(s_1);
                }
                if (current_1 < height + tick_1 && distance_1 < 0) {
                    current_1 = height;
                    clearInterval(s_1);
                }
                if (current_1 < 0 && distance_1 < 0) {
                    current_1 = 0;
                    clearInterval(s_1);
                }
                window.scrollTo(0, current_1);
                time_1 += tick_1;
            }, t);
        }
    };
    /**
     * @param {?=} opt
     * @return {?}
     */
    SimpleSmoothScrollService.prototype.smoothScrollToTop = /**
     * @param {?=} opt
     * @return {?}
     */
    function (opt) {
        if (opt === void 0) { opt = {}; }
        this.smoothScroll(0, opt);
    };
    /**
     * @param {?=} opt
     * @return {?}
     */
    SimpleSmoothScrollService.prototype.smoothScrollToAnchor = /**
     * @param {?=} opt
     * @return {?}
     */
    function (opt) {
        if (opt === void 0) { opt = {}; }
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var eid = window.location.hash;
            if (eid)
                eid = eid.replace('#', '');
            /** @type {?} */
            var target = document.getElementById(eid);
            if (target)
                this.smoothScroll(target.offsetTop, opt);
        }
    };
    SimpleSmoothScrollService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SimpleSmoothScrollService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ SimpleSmoothScrollService.ngInjectableDef = i0.defineInjectable({ factory: function SimpleSmoothScrollService_Factory() { return new SimpleSmoothScrollService(i0.inject(i0.PLATFORM_ID)); }, token: SimpleSmoothScrollService, providedIn: "root" });
    return SimpleSmoothScrollService;
}());
export { SimpleSmoothScrollService };
if (false) {
    /** @type {?} */
    SimpleSmoothScrollService.prototype.platformId;
}

//# sourceMappingURL=data:application/json;base64,