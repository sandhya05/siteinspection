/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, HostListener, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { SimpleSmoothScrollService } from './ng2-simple-smooth-scroll.service';
var SimpleSmoothScrollDirective = /** @class */ (function () {
    function SimpleSmoothScrollDirective(el, smooth, platformId) {
        this.el = el;
        this.smooth = smooth;
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    SimpleSmoothScrollDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var eid = this.el.nativeElement.hash;
            if (eid) {
                if (this.showHash) {
                    // Change URL hash without page jump
                    history.pushState(null, null, eid);
                }
                eid = eid.replace('#', '');
            }
            /** @type {?} */
            var target = document.getElementById(eid) || document.getElementById(this.scrollTo);
            if (target)
                this.smooth.smoothScroll(target.offsetTop, { duration: this.duration, easing: this.easing, offset: this.offset });
            return false;
        }
    };
    SimpleSmoothScrollDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[SimpleSmoothScroll]'
                },] }
    ];
    /** @nocollapse */
    SimpleSmoothScrollDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: SimpleSmoothScrollService },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    SimpleSmoothScrollDirective.propDecorators = {
        scrollTo: [{ type: Input, args: ['scrollTo',] }],
        duration: [{ type: Input, args: ['duration',] }],
        offset: [{ type: Input, args: ['offset',] }],
        easing: [{ type: Input, args: ['easing',] }],
        showHash: [{ type: Input, args: ['showHash',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return SimpleSmoothScrollDirective;
}());
export { SimpleSmoothScrollDirective };
if (false) {
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.scrollTo;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.duration;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.offset;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.easing;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.showHash;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.el;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.smooth;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.platformId;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLXNpbXBsZS1zbW9vdGgtc2Nyb2xsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1zaW1wbGUtc21vb3RoLXNjcm9sbC8iLCJzb3VyY2VzIjpbImxpYi9uZzItc2ltcGxlLXNtb290aC1zY3JvbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7O0lBWTdFLHFDQUNVLElBQ0EsUUFDcUIsVUFBa0I7UUFGdkMsT0FBRSxHQUFGLEVBQUU7UUFDRixXQUFNLEdBQU4sTUFBTTtRQUNlLGVBQVUsR0FBVixVQUFVLENBQVE7S0FDNUM7Ozs7SUFFa0IsNkNBQU87OztJQUE5QjtRQUNFLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFOztZQUN0QyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7WUFDckMsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFOztvQkFFakIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUNwQztnQkFDRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDNUI7O1lBQ0QsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRixJQUFJLE1BQU07Z0JBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUNwSCxPQUFPLEtBQUssQ0FBQztTQUNkO0tBQ0Y7O2dCQS9CRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtpQkFDakM7Ozs7Z0JBTjBCLFVBQVU7Z0JBRTVCLHlCQUF5QjtnQkFlVyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVzs7OzJCQVRwQixLQUFLLFNBQUMsVUFBVTsyQkFDaEIsS0FBSyxTQUFDLFVBQVU7eUJBQ2hCLEtBQUssU0FBQyxRQUFRO3lCQUNkLEtBQUssU0FBQyxRQUFROzJCQUNkLEtBQUssU0FBQyxVQUFVOzBCQVFoQixZQUFZLFNBQUMsT0FBTzs7c0NBcEJ2Qjs7U0FPYSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFNpbXBsZVNtb290aFNjcm9sbFNlcnZpY2UgfSBmcm9tICcuL25nMi1zaW1wbGUtc21vb3RoLXNjcm9sbC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW1NpbXBsZVNtb290aFNjcm9sbF0nXG59KVxuZXhwb3J0IGNsYXNzIFNpbXBsZVNtb290aFNjcm9sbERpcmVjdGl2ZSB7XG4gIEBJbnB1dCgnc2Nyb2xsVG8nKSBwcml2YXRlIHNjcm9sbFRvOiBzdHJpbmc7XG4gIEBJbnB1dCgnZHVyYXRpb24nKSBwcml2YXRlIGR1cmF0aW9uOiBudW1iZXI7XG4gIEBJbnB1dCgnb2Zmc2V0JykgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlcjtcbiAgQElucHV0KCdlYXNpbmcnKSBwcml2YXRlIGVhc2luZzogJ2xpbmVhcicgfCAnZWFzZUluUXVhZCcgfCAnZWFzZU91dFF1YWQnIHwgJ2Vhc2VJbk91dFF1YWQnIHwgJ2Vhc2VJbkN1YmljJyB8ICdlYXNlT3V0Q3ViaWMnIHwgJ2Vhc2VJbk91dEN1YmljJyB8ICdlYXNlSW5RdWFydCcgfCAnZWFzZU91dFF1YXJ0JyB8ICdlYXNlSW5PdXRRdWFydCcgfCAnZWFzZUluUXVpbnQnIHwgJ2Vhc2VPdXRRdWludCcgfCAnZWFzZUluT3V0UXVpbnQnO1xuICBASW5wdXQoJ3Nob3dIYXNoJykgcHJpdmF0ZSBzaG93SGFzaDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgc21vb3RoOiBTaW1wbGVTbW9vdGhTY3JvbGxTZXJ2aWNlLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICApIHsgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgb25DbGljaygpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgbGV0IGVpZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5oYXNoO1xuICAgICAgaWYgKGVpZCkge1xuICAgICAgICBpZiAodGhpcy5zaG93SGFzaCkge1xuICAgICAgICAgIC8vIENoYW5nZSBVUkwgaGFzaCB3aXRob3V0IHBhZ2UganVtcFxuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGVpZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWlkID0gZWlkLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICB9XG4gICAgICBsZXQgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWlkKSB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnNjcm9sbFRvKTtcbiAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgIHRoaXMuc21vb3RoLnNtb290aFNjcm9sbCh0YXJnZXQub2Zmc2V0VG9wLCB7IGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLCBlYXNpbmc6IHRoaXMuZWFzaW5nLCBvZmZzZXQ6IHRoaXMub2Zmc2V0IH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19