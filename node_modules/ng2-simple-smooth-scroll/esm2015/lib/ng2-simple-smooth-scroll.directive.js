/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, HostListener, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { SimpleSmoothScrollService } from './ng2-simple-smooth-scroll.service';
export class SimpleSmoothScrollDirective {
    /**
     * @param {?} el
     * @param {?} smooth
     * @param {?} platformId
     */
    constructor(el, smooth, platformId) {
        this.el = el;
        this.smooth = smooth;
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            let eid = this.el.nativeElement.hash;
            if (eid) {
                if (this.showHash) {
                    // Change URL hash without page jump
                    history.pushState(null, null, eid);
                }
                eid = eid.replace('#', '');
            }
            /** @type {?} */
            let target = document.getElementById(eid) || document.getElementById(this.scrollTo);
            if (target)
                this.smooth.smoothScroll(target.offsetTop, { duration: this.duration, easing: this.easing, offset: this.offset });
            return false;
        }
    }
}
SimpleSmoothScrollDirective.decorators = [
    { type: Directive, args: [{
                selector: '[SimpleSmoothScroll]'
            },] }
];
/** @nocollapse */
SimpleSmoothScrollDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: SimpleSmoothScrollService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
SimpleSmoothScrollDirective.propDecorators = {
    scrollTo: [{ type: Input, args: ['scrollTo',] }],
    duration: [{ type: Input, args: ['duration',] }],
    offset: [{ type: Input, args: ['offset',] }],
    easing: [{ type: Input, args: ['easing',] }],
    showHash: [{ type: Input, args: ['showHash',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.scrollTo;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.duration;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.offset;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.easing;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.showHash;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.el;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.smooth;
    /** @type {?} */
    SimpleSmoothScrollDirective.prototype.platformId;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLXNpbXBsZS1zbW9vdGgtc2Nyb2xsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1zaW1wbGUtc21vb3RoLXNjcm9sbC8iLCJzb3VyY2VzIjpbImxpYi9uZzItc2ltcGxlLXNtb290aC1zY3JvbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFLL0UsTUFBTTs7Ozs7O0lBT0osWUFDVSxJQUNBLFFBQ3FCLFVBQWtCO1FBRnZDLE9BQUUsR0FBRixFQUFFO1FBQ0YsV0FBTSxHQUFOLE1BQU07UUFDZSxlQUFVLEdBQVYsVUFBVSxDQUFRO0tBQzVDOzs7O0lBRWtCLE9BQU87UUFDNUIsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7O1lBQ3RDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztZQUNyQyxJQUFJLEdBQUcsRUFBRTtnQkFDUCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7O29CQUVqQixPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQ3BDO2dCQUNELEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUM1Qjs7WUFDRCxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BGLElBQUksTUFBTTtnQkFDUixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQ3BILE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjs7O1lBL0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2FBQ2pDOzs7O1lBTjBCLFVBQVU7WUFFNUIseUJBQXlCO1lBZVcsTUFBTSx1QkFBOUMsTUFBTSxTQUFDLFdBQVc7Ozt1QkFUcEIsS0FBSyxTQUFDLFVBQVU7dUJBQ2hCLEtBQUssU0FBQyxVQUFVO3FCQUNoQixLQUFLLFNBQUMsUUFBUTtxQkFDZCxLQUFLLFNBQUMsUUFBUTt1QkFDZCxLQUFLLFNBQUMsVUFBVTtzQkFRaEIsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFNpbXBsZVNtb290aFNjcm9sbFNlcnZpY2UgfSBmcm9tICcuL25nMi1zaW1wbGUtc21vb3RoLXNjcm9sbC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW1NpbXBsZVNtb290aFNjcm9sbF0nXG59KVxuZXhwb3J0IGNsYXNzIFNpbXBsZVNtb290aFNjcm9sbERpcmVjdGl2ZSB7XG4gIEBJbnB1dCgnc2Nyb2xsVG8nKSBwcml2YXRlIHNjcm9sbFRvOiBzdHJpbmc7XG4gIEBJbnB1dCgnZHVyYXRpb24nKSBwcml2YXRlIGR1cmF0aW9uOiBudW1iZXI7XG4gIEBJbnB1dCgnb2Zmc2V0JykgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlcjtcbiAgQElucHV0KCdlYXNpbmcnKSBwcml2YXRlIGVhc2luZzogJ2xpbmVhcicgfCAnZWFzZUluUXVhZCcgfCAnZWFzZU91dFF1YWQnIHwgJ2Vhc2VJbk91dFF1YWQnIHwgJ2Vhc2VJbkN1YmljJyB8ICdlYXNlT3V0Q3ViaWMnIHwgJ2Vhc2VJbk91dEN1YmljJyB8ICdlYXNlSW5RdWFydCcgfCAnZWFzZU91dFF1YXJ0JyB8ICdlYXNlSW5PdXRRdWFydCcgfCAnZWFzZUluUXVpbnQnIHwgJ2Vhc2VPdXRRdWludCcgfCAnZWFzZUluT3V0UXVpbnQnO1xuICBASW5wdXQoJ3Nob3dIYXNoJykgcHJpdmF0ZSBzaG93SGFzaDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgc21vb3RoOiBTaW1wbGVTbW9vdGhTY3JvbGxTZXJ2aWNlLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICApIHsgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgb25DbGljaygpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgbGV0IGVpZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5oYXNoO1xuICAgICAgaWYgKGVpZCkge1xuICAgICAgICBpZiAodGhpcy5zaG93SGFzaCkge1xuICAgICAgICAgIC8vIENoYW5nZSBVUkwgaGFzaCB3aXRob3V0IHBhZ2UganVtcFxuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGVpZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWlkID0gZWlkLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICB9XG4gICAgICBsZXQgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWlkKSB8fCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnNjcm9sbFRvKTtcbiAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgIHRoaXMuc21vb3RoLnNtb290aFNjcm9sbCh0YXJnZXQub2Zmc2V0VG9wLCB7IGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLCBlYXNpbmc6IHRoaXMuZWFzaW5nLCBvZmZzZXQ6IHRoaXMub2Zmc2V0IH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19