/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function ISimpleSmoothScrollOption() { }
/** @type {?|undefined} */
ISimpleSmoothScrollOption.prototype.duration;
/** @type {?|undefined} */
ISimpleSmoothScrollOption.prototype.easing;
/** @type {?|undefined} */
ISimpleSmoothScrollOption.prototype.offset;
export class SimpleSmoothScrollOption {
    /**
     * @param {?} option
     */
    constructor(option) {
        /**
         * EasingFunctions - from https://gist.github.com/gre/1650294
         */
        this.EasingFunctions = {
            // no easing, no acceleration
            linear: (t) => { return t; },
            // accelerating from zero velocity
            easeInQuad: (t) => { return t * t; },
            // decelerating to zero velocity
            easeOutQuad: (t) => { return t * (2 - t); },
            // acceleration until halfway, then deceleration
            easeInOutQuad: (t) => { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
            // accelerating from zero velocity
            easeInCubic: (t) => { return t * t * t; },
            // decelerating to zero velocity
            easeOutCubic: (t) => { return (--t) * t * t + 1; },
            // acceleration until halfway, then deceleration
            easeInOutCubic: (t) => { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
            // accelerating from zero velocity
            easeInQuart: (t) => { return t * t * t * t; },
            // decelerating to zero velocity
            easeOutQuart: (t) => { return 1 - (--t) * t * t * t; },
            // acceleration until halfway, then deceleration
            easeInOutQuart: (t) => { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
            // accelerating from zero velocity
            easeInQuint: (t) => { return t * t * t * t * t; },
            // decelerating to zero velocity
            easeOutQuint: (t) => { return 1 + (--t) * t * t * t * t; },
            // acceleration until halfway, then deceleration
            easeInOutQuint: (t) => { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }
        };
        this.duration = option.duration || 800;
        this.offset = option.offset || 0;
        this.easing = this.EasingFunctions[option.easing] || this.EasingFunctions['easeInOutQuad'];
    }
}
if (false) {
    /** @type {?} */
    SimpleSmoothScrollOption.prototype.duration;
    /** @type {?} */
    SimpleSmoothScrollOption.prototype.easing;
    /** @type {?} */
    SimpleSmoothScrollOption.prototype.offset;
    /**
     * EasingFunctions - from https://gist.github.com/gre/1650294
     * @type {?}
     */
    SimpleSmoothScrollOption.prototype.EasingFunctions;
}
export class SimpleSmoothScrollService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
    }
    /**
     * @param {?} height
     * @param {?} opt
     * @return {?}
     */
    smoothScroll(height, opt) {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const option = new SimpleSmoothScrollOption(opt);
            /** @type {?} */
            const duration = option.duration;
            /** @type {?} */
            const doc = document.documentElement;
            /** @type {?} */
            const begin = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
            /** @type {?} */
            const t = 10;
            /** @type {?} */
            const tick = 1 / (duration / t);
            height += option.offset;
            /** @type {?} */
            const distance = height - begin;
            if (distance == 0)
                return;
            /** @type {?} */
            let time = 0;
            /** @type {?} */
            let y;
            /** @type {?} */
            let current;
            /** @type {?} */
            let s = setInterval(function () {
                y = option.easing(time);
                current = y * distance + begin;
                if (current >= height && distance > 0) {
                    current = height;
                    clearInterval(s);
                }
                if (current < height + tick && distance < 0) {
                    current = height;
                    clearInterval(s);
                }
                if (current < 0 && distance < 0) {
                    current = 0;
                    clearInterval(s);
                }
                window.scrollTo(0, current);
                time += tick;
            }, t);
        }
    }
    /**
     * @param {?=} opt
     * @return {?}
     */
    smoothScrollToTop(opt = {}) {
        this.smoothScroll(0, opt);
    }
    /**
     * @param {?=} opt
     * @return {?}
     */
    smoothScrollToAnchor(opt = {}) {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            let eid = window.location.hash;
            if (eid)
                eid = eid.replace('#', '');
            /** @type {?} */
            let target = document.getElementById(eid);
            if (target)
                this.smoothScroll(target.offsetTop, opt);
        }
    }
}
SimpleSmoothScrollService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SimpleSmoothScrollService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ SimpleSmoothScrollService.ngInjectableDef = i0.defineInjectable({ factory: function SimpleSmoothScrollService_Factory() { return new SimpleSmoothScrollService(i0.inject(i0.PLATFORM_ID)); }, token: SimpleSmoothScrollService, providedIn: "root" });
if (false) {
    /** @type {?} */
    SimpleSmoothScrollService.prototype.platformId;
}

//# sourceMappingURL=data:application/json;base64,