import { Injectable, Inject, PLATFORM_ID, Directive, Input, ElementRef, HostListener, NgModule, defineInjectable, inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SimpleSmoothScrollOption {
    /**
     * @param {?} option
     */
    constructor(option) {
        /**
         * EasingFunctions - from https://gist.github.com/gre/1650294
         */
        this.EasingFunctions = {
            // no easing, no acceleration
            linear: (t) => { return t; },
            // accelerating from zero velocity
            easeInQuad: (t) => { return t * t; },
            // decelerating to zero velocity
            easeOutQuad: (t) => { return t * (2 - t); },
            // acceleration until halfway, then deceleration
            easeInOutQuad: (t) => { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
            // accelerating from zero velocity
            easeInCubic: (t) => { return t * t * t; },
            // decelerating to zero velocity
            easeOutCubic: (t) => { return (--t) * t * t + 1; },
            // acceleration until halfway, then deceleration
            easeInOutCubic: (t) => { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
            // accelerating from zero velocity
            easeInQuart: (t) => { return t * t * t * t; },
            // decelerating to zero velocity
            easeOutQuart: (t) => { return 1 - (--t) * t * t * t; },
            // acceleration until halfway, then deceleration
            easeInOutQuart: (t) => { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
            // accelerating from zero velocity
            easeInQuint: (t) => { return t * t * t * t * t; },
            // decelerating to zero velocity
            easeOutQuint: (t) => { return 1 + (--t) * t * t * t * t; },
            // acceleration until halfway, then deceleration
            easeInOutQuint: (t) => { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }
        };
        this.duration = option.duration || 800;
        this.offset = option.offset || 0;
        this.easing = this.EasingFunctions[option.easing] || this.EasingFunctions['easeInOutQuad'];
    }
}
class SimpleSmoothScrollService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
    }
    /**
     * @param {?} height
     * @param {?} opt
     * @return {?}
     */
    smoothScroll(height, opt) {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const option = new SimpleSmoothScrollOption(opt);
            /** @type {?} */
            const duration = option.duration;
            /** @type {?} */
            const doc = document.documentElement;
            /** @type {?} */
            const begin = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
            /** @type {?} */
            const t = 10;
            /** @type {?} */
            const tick = 1 / (duration / t);
            height += option.offset;
            /** @type {?} */
            const distance = height - begin;
            if (distance == 0)
                return;
            /** @type {?} */
            let time = 0;
            /** @type {?} */
            let y;
            /** @type {?} */
            let current;
            /** @type {?} */
            let s = setInterval(function () {
                y = option.easing(time);
                current = y * distance + begin;
                if (current >= height && distance > 0) {
                    current = height;
                    clearInterval(s);
                }
                if (current < height + tick && distance < 0) {
                    current = height;
                    clearInterval(s);
                }
                if (current < 0 && distance < 0) {
                    current = 0;
                    clearInterval(s);
                }
                window.scrollTo(0, current);
                time += tick;
            }, t);
        }
    }
    /**
     * @param {?=} opt
     * @return {?}
     */
    smoothScrollToTop(opt = {}) {
        this.smoothScroll(0, opt);
    }
    /**
     * @param {?=} opt
     * @return {?}
     */
    smoothScrollToAnchor(opt = {}) {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            let eid = window.location.hash;
            if (eid)
                eid = eid.replace('#', '');
            /** @type {?} */
            let target = document.getElementById(eid);
            if (target)
                this.smoothScroll(target.offsetTop, opt);
        }
    }
}
SimpleSmoothScrollService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SimpleSmoothScrollService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ SimpleSmoothScrollService.ngInjectableDef = defineInjectable({ factory: function SimpleSmoothScrollService_Factory() { return new SimpleSmoothScrollService(inject(PLATFORM_ID)); }, token: SimpleSmoothScrollService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SimpleSmoothScrollDirective {
    /**
     * @param {?} el
     * @param {?} smooth
     * @param {?} platformId
     */
    constructor(el, smooth, platformId) {
        this.el = el;
        this.smooth = smooth;
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            let eid = this.el.nativeElement.hash;
            if (eid) {
                if (this.showHash) {
                    // Change URL hash without page jump
                    history.pushState(null, null, eid);
                }
                eid = eid.replace('#', '');
            }
            /** @type {?} */
            let target = document.getElementById(eid) || document.getElementById(this.scrollTo);
            if (target)
                this.smooth.smoothScroll(target.offsetTop, { duration: this.duration, easing: this.easing, offset: this.offset });
            return false;
        }
    }
}
SimpleSmoothScrollDirective.decorators = [
    { type: Directive, args: [{
                selector: '[SimpleSmoothScroll]'
            },] }
];
/** @nocollapse */
SimpleSmoothScrollDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: SimpleSmoothScrollService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
SimpleSmoothScrollDirective.propDecorators = {
    scrollTo: [{ type: Input, args: ['scrollTo',] }],
    duration: [{ type: Input, args: ['duration',] }],
    offset: [{ type: Input, args: ['offset',] }],
    easing: [{ type: Input, args: ['easing',] }],
    showHash: [{ type: Input, args: ['showHash',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SimpleSmoothScrollModule {
}
SimpleSmoothScrollModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SimpleSmoothScrollDirective],
                providers: [SimpleSmoothScrollService],
                exports: [SimpleSmoothScrollDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { SimpleSmoothScrollOption, SimpleSmoothScrollService, SimpleSmoothScrollDirective, SimpleSmoothScrollModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,